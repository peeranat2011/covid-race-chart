{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","master_covid","master_date","index","currentDate","useState","date","setDate","data","setData","randomColor","Math","floor","random","toString","a","covidData","dateArray","fetch","res","json","Object","entries","forEach","dat","timeline","cases","key","value","includes","push","console","log","fetchData","useEffect","timer","setInterval","con","id","title","country","color","sort","b","slice","getData","clearInterval","className","backgroundColor","width","padding","itemHeight","gap","titleStyle","font","valueStyle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAwGeA,MAnGf,WAEE,IAAIC,EAAe,GACfC,EAAc,GACdC,EAAQ,EACRC,EAAc,UAClB,EAAsBC,mBAAS,IAA/B,mBAAKC,EAAL,KAAWC,EAAX,KACA,EAAuBF,mBAAS,IAAhC,mBAAOG,EAAP,KAAYC,EAAZ,KACIC,EAAc,4BAAUC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,MAR7D,4CA8Bb,gCAAAC,EAAA,6DACMC,EAAY,GACZC,EAAY,GAFlB,kBAIsBC,MAAM,yDAJ5B,cAIUC,EAJV,gBAKsBA,EAAIC,OAL1B,OAKIJ,EALJ,OAOIK,OAAOC,QAAQN,GAAWO,SAAQ,YAAmB,IAAD,mBAE9CC,GAF8C,UAElCC,SAASC,OACzBL,OAAOC,QAAQE,GAAKD,SAAQ,SAACI,EAAKC,GAE5BX,EAAUY,SAASF,EAAI,KAGzBV,EAAUa,KAAKH,EAAI,UAf7B,kDAsBII,QAAQC,IAAR,MAtBJ,QAyBE/B,EAAee,EACfd,EAAce,EA1BhB,2DA9Ba,sBA+Eb,OA/Ea,mCAWbgB,GACAC,qBAAU,WAER,IAAMC,EAAQC,aAAY,WACxBhC,EAAcF,EAAYC,GAC1BI,EAAQH,GACRK,EA6CJ,SAAiBH,GACf,IAAME,EAAO,GAWb,OAVAa,OAAOC,QAAQrB,GAAcsB,SAAQ,YAAmB,IAAD,mBAAhBI,EAAgB,KAAXC,EAAW,KAEjDS,EAAM,CACRC,GAAIX,EAAKY,MAAOX,EAAMY,QAASZ,MAAOA,EAAMH,SAASC,MAAMpB,GAAOmC,MAAO/B,KAG3EF,EAAKsB,KAAKO,MAIL7B,EAAKkC,MAAK,SAAS3B,EAAG4B,GAAG,OAAOA,EAAEf,MAAMb,EAAEa,SAAQgB,MAAM,EAAE,IAzDvDC,CAAQzC,IACH,IAATD,GACF2C,cAAcX,GAEhBhC,MACC,OAIF,IAsDD,sBAAK4C,UAAU,MAAf,UACE,2DACA,6BAAKzC,IACL,cAAC,IAAD,CACEE,KAAMA,EACNwC,gBAAgB,OAChBC,MAAO,IACPC,QAAS,GACTC,WAAY,GACZC,IAAK,GACLC,WAAY,CAAEC,KAAM,wBAAyBb,MAAO,QACpDc,WAAY,CAAED,KAAM,wBAAyBb,MAAO,iCCpF7Ce,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ed15dd42.chunk.js","sourcesContent":["import './App.css';\nimport ChartRace from 'react-chart-race';\nimport React, { useState, useEffect } from 'react'\n\n\nfunction App() {\n\n  let master_covid = []\n  let master_date = []\n  let index = 0;\n  let currentDate = \"5/13/21\"\n  let [date, setDate] = useState(\"\");\n  const [data,setData] = useState([])\n  let randomColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n\n\n  fetchData()\n  useEffect(() => {\n\n    const timer = setInterval(() => {\n      currentDate = master_date[index]\n      setDate(currentDate)\n      setData(getData(currentDate))\n      if (index == 29) {\n        clearInterval(timer)\n      }\n      index++;\n    }, 1000)\n\n    \n\n  }, [])\n\n  // logic covert \n  // \n  async function fetchData() {\n    let covidData = []\n    let dateArray = []\n    try {\n      const res = await fetch('https://disease.sh/v3/covid-19/historical?lastdays=30');\n      covidData = await res.json()\n\n      Object.entries(covidData).forEach(([key, value]) => {\n\n        let dat = value.timeline.cases;\n        Object.entries(dat).forEach((key, value) => {\n\n          if (dateArray.includes(key[0])) {\n\n          } else {\n            dateArray.push(key[0])\n          }\n\n        })\n      })\n\n    } catch (err) {\n      console.log(err);\n    }\n\n    master_covid = covidData\n    master_date = dateArray\n\n  }\n\n\n\n  function getData(date) {\n    const data = []\n    Object.entries(master_covid).forEach(([key, value]) => {\n\n      let con = {\n        id: key, title: value.country, value: value.timeline.cases[date], color: randomColor()\n      }\n\n      data.push(con) //push specific data to new array\n    }\n    );\n\n    return data.sort(function(a, b){return b.value-a.value}).slice(0,12);\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <h1>Covid Global Cases by SGN</h1>\n      <h2>{date}</h2>\n      <ChartRace\n        data={data}\n        backgroundColor='#000'\n        width={760}\n        padding={12}\n        itemHeight={58}\n        gap={12}\n        titleStyle={{ font: 'normal 400 13px Arial', color: '#fff' }}\n        valueStyle={{ font: 'normal 400 11px Arial', color: 'rgba(255,255,255, 0.42)' }}\n      /> \n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}